import time
import numpy as np
import board
import busio
import adafruit_ads1x15.ads1015 as ADS1015
import adafruit_ads1x15.analog_in as AnalogIn
from scipy.signal import find_peaks

# --- Konfigurasjon ---
SAMPLE_RATE = 100
WINDOW_SEC = 5
SAMPLES = SAMPLE_RATE * WINDOW_SEC
MIN_RR_SEC = 0.27
MIN_RR_SAMPLES = int(MIN_RR_SEC * SAMPLE_RATE)
MIN_PEAK_HEIGHT = 26000  # justeres etter signalstyrke fra din sensor

# Init ADC
i2c = busio.I2C(board.SCL, board.SDA)
adc = ADS1015.ADS1015(i2c)
channel = AnalogIn.AnalogIn(adc, ADS1015.P0)

def read_signal(samples):
    data = []
    for _ in range(samples):
        data.append(channel.value)
        time.sleep(1 / SAMPLE_RATE)
    return np.array(data)

def estimate_bpm_peaks(signal, fs):
    # Finn topper over terskel
    peaks, _ = find_peaks(signal, height=MIN_PEAK_HEIGHT, distance=MIN_RR_SAMPLES)

    if len(peaks) < 6:
        return None

    # Beregn RR-intervaller og sjekk at alle er gyldige
    rr_intervals = np.diff(peaks) / fs
    if any(rr < MIN_RR_SEC for rr in rr_intervals[:5]):
        return None

    avg_rr = np.mean(rr_intervals[:5])
    bpm = 60 / avg_rr
    return bpm

# --- Hovedløkke ---
try:
    print("Starter måling med find_peaks...")
    while True:
        signal = read_signal(SAMPLES)
        bpm = estimate_bpm_peaks(signal, SAMPLE_RATE)

        if bpm:
            print(f"✅ Estimert puls: {bpm:.1f} BPM")
        else:
            print("❌ Ingen gyldig puls (for få eller for tette topper).")
except KeyboardInterrupt:
    print("Avslutter måling.")
